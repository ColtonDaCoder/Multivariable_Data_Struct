Layout {  
  UnitOfLength = 1e-09
  
  MeshOptions {
    MaximumSidelength = 50
              }


      Parallelogram  { 
        Name = "ComputationalDomain/Background" 
        DomainId = 1
        Priority = -1 
        Height =  %(pitch)e
        Width = %(pitch)e
        BoundarySegment  { 
        BoundaryClass = %(boundary)s
                         }
                 } 
  
Extrusion {
    MeshOptions {
      MaximumSidelengthZ = 50
    }    

    LayerInterface {
      BoundaryClass = Transparent
    }
    Layer {
      MeshOptions {
        ProgressionZUpper = 2
      }
      Thickness = 70 # Fused silica substrate
      DomainId = 1
    }
  }  
} 
 

<?
#LH GAMMADION
keys['x1'] = -(3*keys['arm_thickness']+2*keys['gap'])/2
keys['y1'] = -(3*keys['arm_thickness']+2*keys['gap'])/2
keys['x2'] = (keys['arm_thickness']/2)
keys['y2'] = -(3*keys['arm_thickness']+2*keys['gap'])/2
keys['x3'] = (keys['arm_thickness']/2)
keys['y3'] = -(keys['arm_thickness']/2)
keys['x4'] = (keys['arm_thickness']+2*keys['gap'])/2
keys['y4'] = -(keys['arm_thickness']/2)
keys['x5'] = (keys['arm_thickness']+2*keys['gap'])/2
#keys['x5'] = (keys['arm_thickness']+2*keys['gap']+10)/2
keys['y5'] = -(3*keys['arm_thickness']+2*keys['gap'])/2
keys['x6'] = (3*keys['arm_thickness']+2*keys['gap'])/2
#keys['x6'] = (3*keys['arm_thickness']+2*keys['gap']-10)/2
keys['y6'] = -(3*keys['arm_thickness']+2*keys['gap'])/2
keys['x7'] = (3*keys['arm_thickness']+2*keys['gap'])/2
keys['y7'] = (keys['arm_thickness']/2)
keys['x8'] = (keys['arm_thickness']/2)
keys['y8'] = (keys['arm_thickness']/2)
keys['x9'] = (keys['arm_thickness']/2)
keys['y9'] = (keys['arm_thickness']+2*keys['gap'])/2
keys['x10'] = (3*keys['arm_thickness']+2*keys['gap'])/2
keys['y10'] = (keys['arm_thickness']+2*keys['gap'])/2
keys['x11'] = (3*keys['arm_thickness']+2*keys['gap'])/2
keys['y11'] = (3*keys['arm_thickness']+2*keys['gap'])/2
keys['x12'] = -(keys['arm_thickness']/2)
keys['y12'] = (3*keys['arm_thickness']+2*keys['gap'])/2
keys['x13'] = -(keys['arm_thickness']/2)
keys['y13'] = (keys['arm_thickness']/2)
keys['x14'] = -(keys['arm_thickness']+2*keys['gap'])/2
keys['y14'] = (keys['arm_thickness']/2)
keys['x15'] = -(keys['arm_thickness']+2*keys['gap'])/2
keys['y15'] = (3*keys['arm_thickness']+2*keys['gap'])/2
keys['x16'] = -(3*keys['arm_thickness']+2*keys['gap'])/2
keys['y16'] = (3*keys['arm_thickness']+2*keys['gap'])/2
keys['x17'] = -(3*keys['arm_thickness']+2*keys['gap'])/2
keys['y17'] = -(keys['arm_thickness']/2)
keys['x18'] = -(keys['arm_thickness']/2)
keys['y18'] = -(keys['arm_thickness']/2)
keys['x19'] = -(keys['arm_thickness']/2)
keys['y19'] = -(keys['arm_thickness']+2*keys['gap'])/2
keys['x20'] = -(3*keys['arm_thickness']+2*keys['gap'])/2
keys['y20'] = -(keys['arm_thickness']+2*keys['gap'])/2
?> 

<?
keys['structure_thickness_woZrounding'] = keys['thickness'] - keys['z_radius']
keys['second_aminoacid_layer'] = keys['aminoacid_thickness'] - keys['adhesion_thickness']
keys['second_gammadion_layer'] = keys['structure_thickness_woZrounding'] - keys['second_aminoacid_layer']
?>    


Layout { 
  UnitOfLength = 1e-09

  MeshOptions {
    MaximumSidelength = 40
  }

 Parallelogram  { 
        Name = "ComputationalDomain/Background" 
        DomainId = 1
        Priority = -1 
        Height =  %(pitch)e
        Width = %(pitch)e
        BoundarySegment  { 
        BoundaryClass = %(boundary)s
                         }
                 }
      

Polygon {

        Name = "Gammadion"

        DomainId = 101

        Points = [%(x1)e %(y1)e, %(x2)e %(y2)e, %(x3)e %(y3)e, %(x4)e %(y4)e, %(x5)e %(y5)e, %(x6)e %(y6)e, %(x7)e %(y7)e, %(x8)e %(y8)e, %(x9)e %(y9)e, %(x10)e %(y10)e, %(x11)e %(y11)e, %(x12)e %(y12)e, %(x13)e %(y13)e, %(x14)e %(y14)e, %(x15)e %(y15)e, %(x16)e %(y16)e, %(x17)e %(y17)e, %(x18)e %(y18)e, %(x19)e %(y19)e, %(x20)e %(y20)e]

        
        RotationAngle = %(angle)e
        MeshOptions {
         MaximumSidelength = 40
        }
		
        CornerRounding {
          Point = [1, 2, 5, 6, 7, 10, 11,12,15,16,17,20]
          Radius = 20
          NPoints = 8
        }
        


          #CornerRounding {
          #Point = [3,4,8,9,13,14,18, 19]
          #Radius = 3
          #NPoints = 8
        #}

                       }

           
 Extrusion {
 
      LayerInterface {
      GlobalZ = 0.0
    }
    
    MeshOptions {
      MaximumSidelengthZ = 50
      
        
    }    

    Layer {
      MeshOptions {
        MaximumSidelengthZLower = 10
        MaximumSidelengthZUpper = 10
      }
      
      Thickness = %(adhesion_thickness)e #Titanium Adhesion Layer and First layer of aminoacid
      DomainIdMapping = [1 5 
      101 2]

    }


    Layer {
      MeshOptions {
        MaximumSidelengthZLower = 10
        MaximumSidelengthZUpper = 10
      }
      
      Thickness = %(second_aminoacid_layer)e #Aluminum Gammadion and second_aminoacid_layer
      DomainIdMapping = [1 5 
      101 4]

    }

    Layer {
      MeshOptions {
        MaximumSidelengthZLower = 10
        MaximumSidelengthZUpper = 10
      }
      
      Thickness = %(second_gammadion_layer)e #Remaining Aluminum Gammadion
      DomainIdMapping = [1 3 
      101 4]

    }




    
 

 #Z-Rounding Process
 #LH gammadion
<?
import numpy as np
keys['num_Zradius_dimers'] = keys['z_radius']/keys['z_radius_MSL'] # The number of dimer slices in the Z-radius rounding
z_step = keys['z_radius']/keys['z_radius_MSL']
i=1
while i <= keys['num_Zradius_dimers']:
  keys['step'] = keys['z_radius'] - ((keys['z_radius']**2 - (keys['z_radius_MSL']*i)**2)**(1/2))
  
  keys['x1'] = (-(3*keys['arm_thickness']+2*keys['gap'])/2 + keys['step'])
  keys['y1'] = -(3*keys['arm_thickness']+2*keys['gap'])/2 + keys['step']
  keys['x2'] = ((keys['arm_thickness']/2) - keys['step'])
  keys['y2'] = -(3*keys['arm_thickness']+2*keys['gap'])/2 + keys['step']
  keys['x3'] = ((keys['arm_thickness']/2) - keys['step'])
  keys['y3'] = -(keys['arm_thickness']/2) + keys['step']
  keys['x4'] = ((keys['arm_thickness']+2*keys['gap'])/2 + keys['step'])
  keys['y4'] = -(keys['arm_thickness']/2) + keys['step']
  keys['x5'] = ((keys['arm_thickness']+2*keys['gap'])/2 +  keys['step'])
  keys['y5'] = -(3*keys['arm_thickness']+2*keys['gap'])/2 +  keys['step']
  keys['x6'] = ((3*keys['arm_thickness']+2*keys['gap'])/2 - keys['step'])
  keys['y6'] = -(3*keys['arm_thickness']+2*keys['gap'])/2 +  keys['step']
  keys['x7'] = ((3*keys['arm_thickness']+2*keys['gap'])/2 - keys['step'])
  keys['y7'] = (keys['arm_thickness']/2) - keys['step']
  keys['x8'] = ((keys['arm_thickness']/2) - keys['step'])
  keys['y8'] = (keys['arm_thickness']/2) - keys['step']
  keys['x9'] = ((keys['arm_thickness']/2) - keys['step'])
  keys['y9'] = (keys['arm_thickness']+2*keys['gap'])/2 + keys['step']
  keys['x10'] = ((3*keys['arm_thickness']+2*keys['gap'])/2 - keys['step'])
  keys['y10'] = (keys['arm_thickness']+2*keys['gap'])/2 + keys['step']
  keys['x11'] = ((3*keys['arm_thickness']+2*keys['gap'])/2 - keys['step'])
  keys['y11'] = (3*keys['arm_thickness']+2*keys['gap'])/2 - keys['step']
  keys['x12'] = (-(keys['arm_thickness']/2) +  keys['step'])
  keys['y12'] = (3*keys['arm_thickness']+2*keys['gap'])/2 -  keys['step']
  keys['x13'] = (-(keys['arm_thickness']/2) + keys['step'])
  keys['y13'] = (keys['arm_thickness']/2) - keys['step']
  keys['x14'] = (-(keys['arm_thickness']+2*keys['gap'])/2 - keys['step'])
  keys['y14'] = (keys['arm_thickness']/2) - keys['step']
  keys['x15'] = (-(keys['arm_thickness']+2*keys['gap'])/2 - keys['step'])
  keys['y15'] = (3*keys['arm_thickness']+2*keys['gap'])/2 - keys['step']
  keys['x16'] = (-(3*keys['arm_thickness']+2*keys['gap'])/2 + keys['step'])
  keys['y16'] = (3*keys['arm_thickness']+2*keys['gap'])/2 - keys['step']
  keys['x17'] = (-(3*keys['arm_thickness']+2*keys['gap'])/2 + keys['step'])
  keys['y17'] = -(keys['arm_thickness']/2) + keys['step']
  keys['x18'] = (-(keys['arm_thickness']/2) + keys['step'])
  keys['y18'] = -(keys['arm_thickness']/2) + keys['step']
  keys['x19'] = (-(keys['arm_thickness']/2) + keys['step'])
  keys['y19'] = -(keys['arm_thickness']+2*keys['gap'])/2 - keys['step']
  keys['x20'] = (-(3*keys['arm_thickness']+2*keys['gap'])/2 + keys['step'])
  keys['y20'] = -(keys['arm_thickness']+2*keys['gap'])/2 -  keys['step']
  
  
  i=i+1
  ?>
Layer {
  Thickness = %(z_radius_MSL)e
  DomainIdMapping = [1 3 ##Air
                    101 4
					] ##Aluminum
}

LayerInterface {
  GeometryValues = [
    Gammadion/Points = [%(x1)e %(y1)e, %(x2)e %(y2)e, %(x3)e %(y3)e, %(x4)e %(y4)e, %(x5)e %(y5)e, %(x6)e %(y6)e, %(x7)e %(y7)e, %(x8)e %(y8)e, %(x9)e %(y9)e, %(x10)e %(y10)e, %(x11)e %(y11)e, %(x12)e %(y12)e, %(x13)e %(y13)e, %(x14)e %(y14)e, %(x15)e %(y15)e, %(x16)e %(y16)e, %(x17)e %(y17)e, %(x18)e %(y18)e, %(x19)e %(y19)e, %(x20)e %(y20)e]
	]
}

<?
?>

<?
#Define first gammadion dimensions for aminoacid

keys['a_step'] = keys['z_radius'] - ((keys['z_radius']**2 - (keys['z_radius_MSL']*keys['num_Zradius_dimers'])**2)**(1/2))

keys['a_x1'] = (-(3*keys['arm_thickness']+2*keys['gap'])/2 + keys['a_step'])
keys['a_y1'] = -(3*keys['arm_thickness']+2*keys['gap'])/2 + keys['a_step']
keys['a_x2'] = ((keys['arm_thickness']/2) - keys['a_step'])
keys['a_y2'] = -(3*keys['arm_thickness']+2*keys['gap'])/2 + keys['a_step']
keys['a_x3'] = ((keys['arm_thickness']/2) - keys['a_step'])
keys['a_y3'] = -(keys['arm_thickness']/2) + keys['a_step']
keys['a_x4'] = ((keys['arm_thickness']+2*keys['gap'])/2 + keys['a_step'])
keys['a_y4'] = -(keys['arm_thickness']/2) + keys['a_step'] 
keys['a_x5'] = ((keys['arm_thickness']+2*keys['gap'])/2 +  keys['a_step'])
keys['a_y5'] = -(3*keys['arm_thickness']+2*keys['gap'])/2 +  keys['a_step']
keys['a_x6'] = ((3*keys['arm_thickness']+2*keys['gap'])/2 - keys['a_step'])
keys['a_y6'] = -(3*keys['arm_thickness']+2*keys['gap'])/2 +  keys['a_step']
keys['a_x7'] = ((3*keys['arm_thickness']+2*keys['gap'])/2 - keys['a_step'])
keys['a_y7'] = (keys['arm_thickness']/2) - keys['a_step']
keys['a_x8'] = ((keys['arm_thickness']/2) - keys['a_step'])
keys['a_y8'] = (keys['arm_thickness']/2) - keys['a_step']
keys['a_x9'] = ((keys['arm_thickness']/2) - keys['a_step'])
keys['a_y9'] = (keys['arm_thickness']+2*keys['gap'])/2 + keys['a_step']
keys['a_x10'] = ((3*keys['arm_thickness']+2*keys['gap'])/2 - keys['a_step'])
keys['a_y10'] = (keys['arm_thickness']+2*keys['gap'])/2 + keys['a_step']
keys['a_x11'] = ((3*keys['arm_thickness']+2*keys['gap'])/2 - keys['a_step'])
keys['a_y11'] = (3*keys['arm_thickness']+2*keys['gap'])/2 - keys['a_step']
keys['a_x12'] = (-(keys['arm_thickness']/2) +  keys['a_step'])
keys['a_y12'] = (3*keys['arm_thickness']+2*keys['gap'])/2 -  keys['a_step']
keys['a_x13'] = (-(keys['arm_thickness']/2) + keys['a_step'])
keys['a_y13'] = (keys['arm_thickness']/2) - keys['a_step']
keys['a_x14'] = (-(keys['arm_thickness']+2*keys['gap'])/2 - keys['a_step'])
keys['a_y14'] = (keys['arm_thickness']/2) - keys['a_step']
keys['a_x15'] = (-(keys['arm_thickness']+2*keys['gap'])/2 - keys['a_step'])
keys['a_y15'] = (3*keys['arm_thickness']+2*keys['gap'])/2 - keys['a_step']
keys['a_x16'] = (-(3*keys['arm_thickness']+2*keys['gap'])/2 + keys['a_step'])
keys['a_y16'] = (3*keys['arm_thickness']+2*keys['gap'])/2 - keys['a_step']
keys['a_x17'] = (-(3*keys['arm_thickness']+2*keys['gap'])/2 + keys['a_step'])
keys['a_y17'] = -(keys['arm_thickness']/2) + keys['a_step']
keys['a_x18'] = (-(keys['arm_thickness']/2) + keys['a_step'])
keys['a_y18'] = -(keys['arm_thickness']/2) + keys['a_step']
keys['a_x19'] = (-(keys['arm_thickness']/2) + keys['a_step'])
keys['a_y19'] = -(keys['arm_thickness']+2*keys['gap'])/2 - keys['a_step']
keys['a_x20'] = (-(3*keys['arm_thickness']+2*keys['gap'])/2 + keys['a_step'])
keys['a_y20'] = -(keys['arm_thickness']+2*keys['gap'])/2 -  keys['a_step']



keys['aminoacid_thickness_woZrounding'] = keys['aminoacid_thickness'] - keys['z_radius']

?>

Layer {
  Thickness = %(aminoacid_thickness_woZrounding)e ##Aminoacid layer without rounding
  DomainIdMapping = [1 3 ##Air
                    101 5
					] ##Aminoacid
}


LayerInterface {
  GeometryValues = [
    Gammadion/Points = [%(a_x1)e %(a_y1)e, %(a_x2)e %(a_y2)e, %(a_x3)e %(a_y3)e, %(a_x4)e %(a_y4)e, %(a_x5)e %(a_y5)e, %(a_x6)e %(a_y6)e, %(a_x7)e %(a_y7)e, %(a_x8)e %(a_y8)e, %(a_x9)e %(a_y9)e, %(a_x10)e %(a_y10)e, %(a_x11)e %(a_y11)e, %(a_x12)e %(a_y12)e, %(a_x13)e %(a_y13)e, %(a_x14)e %(a_y14)e, %(a_x15)e %(a_y15)e, %(a_x16)e %(a_y16)e, %(a_x17)e %(a_y17)e, %(a_x18)e %(a_y18)e, %(a_x19)e %(a_y19)e, %(a_x20)e %(a_y20)e]
	]
}

#Z-Rounding Process for aminoacid
<?
import numpy as np
keys['num_Zradius_dimers'] = keys['z_radius']/keys['z_radius_MSL'] # The number of dimer slices in the Z-radius rounding
z_step = keys['z_radius']/keys['z_radius_MSL']
i=1
while i <= keys['num_Zradius_dimers']:
  keys['step'] = keys['z_radius'] - ((keys['z_radius']**2 - (keys['z_radius_MSL']*i)**2)**(1/2))
  
  keys['a_x1'] = (-(3*keys['arm_thickness']+2*keys['gap'])/2 + keys['step'] + keys['a_step'])
  keys['a_y1'] = -(3*keys['arm_thickness']+2*keys['gap'])/2 + keys['step'] + keys['a_step']
  keys['a_x2'] = ((keys['arm_thickness']/2) - keys['step'] - keys['a_step'])
  keys['a_y2'] = -(3*keys['arm_thickness']+2*keys['gap'])/2 + keys['step'] + keys['a_step']
  keys['a_x3'] = ((keys['arm_thickness']/2) - keys['step'] - keys['a_step'])
  keys['a_y3'] = -(keys['arm_thickness']/2) + keys['step'] + keys['a_step']
  keys['a_x4'] = ((keys['arm_thickness']+2*keys['gap'])/2 + keys['step'] + keys['a_step'])
  keys['a_y4'] = -(keys['arm_thickness']/2) +  keys['step'] + keys['a_step']
  keys['a_x5'] = ((keys['arm_thickness']+2*keys['gap'])/2 +  keys['step'] + keys['a_step'])
  keys['a_y5'] = -(3*keys['arm_thickness']+2*keys['gap'])/2 +  keys['step'] + keys['a_step']
  keys['a_x6'] = ((3*keys['arm_thickness']+2*keys['gap'])/2 - keys['step'] - keys['a_step'])
  keys['a_y6'] = -(3*keys['arm_thickness']+2*keys['gap'])/2 +  keys['step'] + keys['a_step']
  keys['a_x7'] = ((3*keys['arm_thickness']+2*keys['gap'])/2 - keys['step'] - keys['a_step'])
  keys['a_y7'] = (keys['arm_thickness']/2) - keys['step'] - keys['a_step']
  keys['a_x8'] = ((keys['arm_thickness']/2) - keys['step'] - keys['a_step'])
  keys['a_y8'] = (keys['arm_thickness']/2) - keys['step'] - keys['a_step']
  keys['a_x9'] = ((keys['arm_thickness']/2) - keys['step'] - keys['a_step'])
  keys['a_y9'] = (keys['arm_thickness']+2*keys['gap'])/2 + keys['step'] + keys['a_step']
  keys['a_x10'] = ((3*keys['arm_thickness']+2*keys['gap'])/2 - keys['step'] - keys['a_step'])
  keys['a_y10'] = (keys['arm_thickness']+2*keys['gap'])/2 + keys['step'] + keys['a_step']
  keys['a_x11'] = ((3*keys['arm_thickness']+2*keys['gap'])/2 - keys['step'] - keys['a_step'])
  keys['a_y11'] = (3*keys['arm_thickness']+2*keys['gap'])/2 - keys['step'] - keys['a_step']
  keys['a_x12'] = (-(keys['arm_thickness']/2) +  keys['step'] + keys['a_step'])
  keys['a_y12'] = (3*keys['arm_thickness']+2*keys['gap'])/2 -  keys['step'] - keys['a_step']
  keys['a_x13'] = (-(keys['arm_thickness']/2) + keys['step'] + keys['a_step'])
  keys['a_y13'] = (keys['arm_thickness']/2) - keys['step'] - keys['a_step']
  keys['a_x14'] = (-(keys['arm_thickness']+2*keys['gap'])/2 - keys['step'] - keys['a_step'])
  keys['a_y14'] = (keys['arm_thickness']/2) - keys['step'] - keys['a_step']
  keys['a_x15'] = (-(keys['arm_thickness']+2*keys['gap'])/2 - keys['step'] - keys['a_step'])
  keys['a_y15'] = (3*keys['arm_thickness']+2*keys['gap'])/2 - keys['step'] - keys['a_step']
  keys['a_x16'] = (-(3*keys['arm_thickness']+2*keys['gap'])/2 + keys['step'] + keys['a_step'])
  keys['a_y16'] = (3*keys['arm_thickness']+2*keys['gap'])/2 - keys['step'] - keys['a_step']
  keys['a_x17'] = (-(3*keys['arm_thickness']+2*keys['gap'])/2 + keys['step'] + keys['a_step'])
  keys['a_y17'] = -(keys['arm_thickness']/2) + keys['step'] + keys['a_step']
  keys['a_x18'] = (-(keys['arm_thickness']/2) + keys['step'] + keys['a_step'])
  keys['a_y18'] = -(keys['arm_thickness']/2) + keys['step'] + keys['a_step']
  keys['a_x19'] = (-(keys['arm_thickness']/2) + keys['step'] + keys['a_step'])
  keys['a_y19'] = -(keys['arm_thickness']+2*keys['gap'])/2 - keys['step'] - keys['a_step']
  keys['a_x20'] = (-(3*keys['arm_thickness']+2*keys['gap'])/2 + keys['step'] + keys['a_step'])
  keys['a_y20'] = -(keys['arm_thickness']+2*keys['gap'])/2 -  keys['step'] - keys['a_step']
  
  
  i=i+1
  ?>
Layer {
  Thickness = %(z_radius_MSL)e
  DomainIdMapping = [1 3 ##Air
                    101 5
					] ##Aminoacid
}

LayerInterface {
  GeometryValues = [
    Gammadion/Points = [%(a_x1)e %(a_y1)e, %(a_x2)e %(a_y2)e, %(a_x3)e %(a_y3)e, %(a_x4)e %(a_y4)e, %(a_x5)e %(a_y5)e, %(a_x6)e %(a_y6)e, %(a_x7)e %(a_y7)e, %(a_x8)e %(a_y8)e, %(a_x9)e %(a_y9)e, %(a_x10)e %(a_y10)e, %(a_x11)e %(a_y11)e, %(a_x12)e %(a_y12)e, %(a_x13)e %(a_y13)e, %(a_x14)e %(a_y14)e, %(a_x15)e %(a_y15)e, %(a_x16)e %(a_y16)e, %(a_x17)e %(a_y17)e, %(a_x18)e %(a_y18)e, %(a_x19)e %(a_y19)e, %(a_x20)e %(a_y20)e]
	]
}

<?
?>


} # End of extrusion    
} # End of Layout

Layout {
  UnitOfLength = 1e-09

  MeshOptions {
    MaximumSidelength = 50
  }

      Parallelogram  { 
        Name = "ComputationalDomain/Background" 
        DomainId = 1
        Priority = -1 
        Height =  %(pitch)e
        Width = %(pitch)e
        BoundarySegment  { 
        BoundaryClass = %(boundary)s
                         }
                 } 

  Extrusion {
    MeshOptions {
      MaximumSidelengthZ = 50
    }    

    Layer {
      Thickness = 200
      DomainId = 3 #Air
    }
    LayerInterface {
      BoundaryClass = Transparent
    }
  }  

}
